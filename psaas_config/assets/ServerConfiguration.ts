/**
 * PSaaS config.json documentation.
 *
 * This documentation is for the config.json file that is read
 * by PSaaS Manager and PSaaS Builder to define in part how
 * they connect to external services and how they create new
 * PSaaS jobs.
 * @packageDocumentation
 */
/**
 * The verbosities that can be used when writing PSaaS logs.
 */
export declare enum Verbosity {
    /**
     * No output
     */
    NONE = 0,
    /**
     * Only output complete application failures
     */
    SEVERE = 1,
    /**
     * Output load warnings
     */
    WARN = 2,
    /**
     * Output job status messages
     */
    INFO = 3,
    /**
     * Output all information
     */
    MAX = 4
}
/**
 * The type of output file that will be generated by Builder.
 */
export declare enum OutputType {
    /**
     * The protobuf JSON export formatted in a way that is
     * easiest to read by users.
     *
     * **Recommended for development**
     */
    JSON = 0,
    /**
     * The protobuf JSON export but minified to reduce the size
     * of the file/stream.
     *
     * **Recommended for production**
     */
    JSON_MINIMAL = 1,
    /**
     * Protobuf exported binary stream. The same representation
     * as the JSON versions but minified as much as possible
     * for optimized transfer to remote machines. This is the
     * only format that is not in any way human readable.
     */
    BINARY = 2,
    /**
     * Only supported on legacy Windows releases.
     * @deprecated Recent versions of PSaaS v6 and all releases
     * of PSaaS v7 do not support XML.
     */
    XML = 3
}
/**
 * A log file created by PSaaS.
 */
export declare class LogFile {
    /**
     * The name of the file that PSaaS logs will be written to.
     */
    filename: string;
    /**
     * The verbosity of the output logs.
     */
    verbosity: Verbosity;
}
/**
 * Signal files that indicate that a job has started
 * or finished. Can be used by processes that implement
 * file system watchers to determine when a job has
 * started and finished.
 */
export declare class Signals {
    /**
     * The name of a file to write when the job starts
     */
    start: string;
    /**
     * The name of a file to write when the job finishes
     */
    complete: string;
}
/**
 * Default job execution limits so that it may
 * share hardware with other jobs or other services.
 */
export declare class Hardware {
    /**
     * The maximum number of processes that PSaaS can start to run a job.
     */
    processes: number;
    /**
     * The maximum number of cores that PSaaS should run on if processor
     * affinity is enabled.
     *
     * **Recommendation**: use either 0 or -1 to indicate that PSaaS
     * Manager should manage the number of cores used based
     * on the system that it is running on.
     * @deprecated This property is still read but is hugely restricted
     * in usage. PSaaS Manager reserves the right to override this value
     * based on the current system setup. _Strongly_ recommend setting
     * this value to 0 or -1.
     */
    cores: number;
}
/**
 * Details for connecting PSaaS Builder to PSaaS Manager using a direct
 * socket connection.
 */
export declare class SocketConnection {
    /**
     * The IP address or domain name used by the machine running PSaaS Manager.
     */
    address: string;
    /**
     * The port number used to connect to PSaaS Manager.
     */
    port: number;
}
/**
 * Details for connecting to an MQTT broker. Can be used by PSaaS for communicating
 * status messages, Builder and Manager for sharing files and starting jobs, and the
 * API for listening for job updates.
 */
export declare class MqttConnection {
    /**
     * The IP address or hostname of the MQTT broker.
     */
    hostname: string;
    /**
     * The port that MQTT is running on.
     */
    port: number;
    /**
     * The base text to be used as a topic for communicating over MQTT.
     * Allows other services or multiple, independent PSaaS instances to be
     * run on the same broker without collisions. Must not include '/'.
     */
    topic: string;
    /**
     * The verbosity of log messages to output.
     */
    verbosity: Verbosity;
    /**
     * The quality of service to send message at. Should be 0-2.
     */
    qos: number;
    /**
     * An optional username required to authenticate with the MQTT broker.
     */
    username: string;
    /**
     * An optional password required to authenticate with the MQTT broker.
     */
    password: string;
}
/**
 * Details for how the API will connect to their related instance
 * of Builder.
 */
export declare class BuilderConnection {
    /**
     * The hostname of the machine the Builder is running on.
     */
    hostname: string;
    /**
     * The port that Builder is listening on.
     */
    port: number;
    /**
     * The outoutp file format that will be generated by Builder.
     */
    format: OutputType;
}
/**
 * Settings that dictate how PSaaS Builder is
 * started if using Manager to run Builder.
 */
export declare class BuilderConfiguration {
    /**
     * The path to the Builder jar file.
     */
    builder_location: string;
    /**
     * The log level for Builder to output at.
     */
    log_level: string;
    /**
     * Start Builder when Manager starts.
     */
    start_with_manager: boolean;
    /**
     * Should Builder write all input files to a single job file.
     */
    output_single_file: boolean;
}
/**
 * MQTT settings that are specific to the PSaaS Manager instance reading
 * this configuration.
 */
export declare class MqttSettings {
    /**
     * The maximum buffer size to use for a single MQTT payload.
     */
    max_buffer_size: number;
    /**
     * An optional MQTT ID if you don't want one to be automatically generated.
     */
    mqtt_id?: string;
    /**
     * Use the internal MQTT broker instead of connecting to an external one.
     */
    use_internal_broker?: boolean;
    /**
     * When using the internal broker require username/password authentication.
     */
    use_internal_authentication?: boolean;
}
/**
 * RPC server/client configuration options.
 */
export declare class RpcConfiguration {
    /**
     * Is the RPC server enabled.
     */
    enabled: boolean;
    /**
     * The address that Builder will use to connect to the RPC server that Manager is running.
     */
    externalAddress: string;
    /**
     * The port that the RPC server will be running on.
     */
    port: number;
    /**
     * An optional internal address to use to connect to the RPC server that Manager is running. If
     * Manager nodes are running both on the same network and an external network use
     * {@link RpcConfiguration.externalAddress} for the external network address and
     * {@link RpcConfiguration.internal_address} for the local network address.
     */
    internal_address?: string;
    /**
     * A different port for the external connection to advertise, so the external connection can be port
     * forwarded to a different port.
     */
    external_port?: number;
    /**
     * A different port for the internal connection to advertise, so the internal connection can be port
     * forwarded to a different port
     */
    internal_port?: number;
}
/**
 * PSaaS Manager specific settings.
 */
export declare class ManagerSettings {
    /**
     * The maximum number of concurrent jobs.
     */
    max_concurrent: number;
    /**
     * Restart old processes when Manager starts.
     */
    restart_old: boolean;
    /**
     * The path to the PSaaS executable.
     */
    psaas_location: string;
    /**
     * Lock manager to core 0 and PSaaS to other cores.
     */
    lock_cpu: boolean;
    /**
     * Pause the job queue when Manager starts.
     */
    start_paused: boolean;
    /**
     * PSaaS Builder specific settings.
     */
    internal_builder: BuilderConfiguration;
    /**
     * MQTT settings that are specific to PSaaS Manager.
     */
    mqtt_settings: MqttSettings;
    /**
     * Should PSaaS instances be locked to single NUMA nodes.
     */
    numa_lock?: boolean;
    /**
     * A number of cores to leave idle when running PSaaS instances. Defaults to 0..
     */
    skip_cores?: number;
    /**
     * Settings for RPC connections, used to instantiate the connection.
     */
    rpc_settings?: RpcConfiguration;
}
/**
 * The root class definition for the PSaaS configuration file.
 *
 * If building a configuration file manually, start here.
 */
export declare class ConfigJson {
    /**
     * Configuration for the log file that is written by PSaaS.
     */
    log: LogFile;
    /**
     * Signal files that indicate that a job has started or
     * finished.
     */
    signals: Signals;
    /**
     * Configuration for the hardware resources that PSaaS will
     * use to run a job.
     */
    hardware: Hardware;
    /**
     * Communication between Builder and Manager will take place over
     * a dedicated socket.
     *
     * Must not be specified at the same time as {@link ConfigJson.mqtt}.
     * If both are present the behaviour will be undefined.
     */
    socket: SocketConnection;
    /**
     * Communication between all applications will take place over MQTT.
     *
     * Must not be specified at the same time as {@link ConfigJson.socket}.
     * If both are present the behaviour will be undefined.
     */
    mqtt: MqttConnection;
    /**
     * Settings the API will use to connect to Builder.
     */
    builder: BuilderConnection;
    /**
     * The directory where sample data is stored for testing purposes.
     * Typically the job directory.
     */
    exampleDirectory: string;
    /**
     * Settings that are only used by PSaaS Manager.
     */
    manager_settings: ManagerSettings;
}
